'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _propTypes = require('prop-types');

var _propTypes2 = _interopRequireDefault(_propTypes);

var _objectAssign = require('object-assign');

var _objectAssign2 = _interopRequireDefault(_objectAssign);

var _styles = require('./styles');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var PreloaderIcon = function (_React$Component) {
    _inherits(PreloaderIcon, _React$Component);

    function PreloaderIcon() {
        _classCallCheck(this, PreloaderIcon);

        return _possibleConstructorReturn(this, (PreloaderIcon.__proto__ || Object.getPrototypeOf(PreloaderIcon)).apply(this, arguments));
    }

    _createClass(PreloaderIcon, [{
        key: 'render',


        /**
         * @returns {React.Component}
         */


        /**
         * @property {?string} className
         * @property {React.Component} loader
         * @property {?number} size
         * @property {?string} unit
         * @property {?React.CSSProperties} style
         * @property {?number} strokeWidth
         * @property {?string} strokeColor
         * @property {?number} duration
         */
        value: function render() {
            var _props = this.props,
                className = _props.className,
                loader = _props.loader,
                size = _props.size,
                unit = _props.unit,
                style = _props.style;
            var _props2 = this.props,
                strokeWidth = _props2.strokeWidth,
                strokeColor = _props2.strokeColor,
                duration = _props2.duration;

            var sized = '' + size + unit;
            return _react2.default.createElement(
                'div',
                {
                    className: 'preloader-icon ' + className,
                    style: (0, _objectAssign2.default)({ width: sized, height: sized }, style)
                },
                _react2.default.createElement(
                    'div',
                    { className: 'preloader-icon__inner', style: _styles.inner },
                    _react2.default.createElement(
                        'em',
                        { className: 'preloader-icon__title', style: _styles.title },
                        'Loading...'
                    ),
                    _react2.default.createElement(loader, { strokeWidth: strokeWidth, strokeColor: strokeColor, duration: duration })
                )
            );
        }

        /**
         * @property {string} className
         * @property {number} size
         * @property {string} unit
         * @property {React.CSSProperties} style
         * @property {number} strokeWidth
         * @property {string} strokeColor
         * @property {number} duration
         */

    }]);

    return PreloaderIcon;
}(_react2.default.Component);

PreloaderIcon.propTypes = {
    className: _propTypes2.default.string,
    loader: _propTypes2.default.func.isRequired,
    size: _propTypes2.default.number,
    unit: _propTypes2.default.string,
    style: _propTypes2.default.object,
    strokeWidth: _propTypes2.default.number,
    strokeColor: _propTypes2.default.string,
    duration: _propTypes2.default.number
};
PreloaderIcon.defaultProps = {
    className: '',
    size: 32,
    unit: 'px',
    style: {},
    strokeWidth: 3,
    strokeColor: '#f0ad4e',
    duration: 800
};
exports.default = PreloaderIcon;